import { Selector } from 'testcafe'
import Helpers from '../test_utils/helpers'
import config from '../test_utils/config'

const H = new Helpers()
// entry points
//Lotto LandingPage components - Before login
const menu = Selector('.navDesc').withText('Menu')
const results = Selector('.results')
const lottoLogo = Selector('.navLottoLogo')
const login = Selector('.account')
const registerNowButton = Selector('[href="/registration"]')
const lottoGame = Selector('[href="/lotto"]')
const kenoGame = Selector('[href="/keno"]')
const bullseyeGame = Selector('[href="/bullseye"]')
const play3Game = Selector('[href="/play3"]')
const instantKiwiGame = Selector('[href="/instant-kiwi"]')
const loginButton = Selector('.login')
const loginForm = Selector('.form-login')

//Registration Page
const registrationPageTitle = Selector('#register-title')
const registrationForm = Selector('#registerForm')
const emailForRegistration = Selector('#emailAddress')
const firstName = Selector('#firstName')
const lastName = Selector('#lastName')
const newPassword = Selector('#password')
const dobDD = Selector('#dobDay')
const dobMonth = Selector('#dobMonth')
const dobYYYY = Selector('#dobYear')
const maleGender = Selector('#maleCheckboxLabel')
const femaleGender = Selector('#femaleCheckboxLabel')
const mobileAreaCode = Selector('#mobileNetwork')
const mobileNumber = Selector('#mobileNumber')
const region = Selector('#regionPickerValue')
const location = Selector('#locationPickerValue')
const securityQuestion = Selector('#securityQuestion')
const securityAnswer = Selector('#securityAnswer')
const emailPreferencesJackpots = Selector('#jackpotReminderLabel')
const emailPreferencesResults = Selector('#promotionRemindersLabel')
const emailPreferencesInstantKiwi = Selector('#IKReminderLabel')
const registrationSubmitButton = Selector('#signupButton')
const myLottoTerms = Selector('#tandc-link')
const loginFromRegistration = Selector('#loginLinkFromRegisterForm')
const registrationSuccessPage = Selector('#nearlyThereContainer')

//Bank account setup page
const emailVerificationSuccessModal = Selector('#loginFormContainer')
const bankAccountAtRegistration = Selector('.form-box-account-number')
const spendingLimitsAtRegistration = Selector('.form-box').nth(1)
const bankAccountBank = Selector('#bankAccountBank')
const bankAccountBankBranch = Selector('#bankAccountBranch')
const bankAccountAccount = Selector('#bankAccountAccount')
const bankAccountSuffix = Selector('#bankAccountSuffix')
const completeRegistrationButton = Selector('#completeRegistrationButton')
const skipRegistration = Selector('.complete-registration-skip')

//Change bank account page
const changeBankAccountLink = Selector('#changeMyBankAccount')
const bankAccountPassword = Selector('#bankAccountPassword')
const bankAccountForm = Selector('#bankAccountForm')
const bankAccountSaveButton = Selector('#bankAccountSaveButton')
const closeBankAccountModal = Selector('#close-modal')

//Login form components
const email = Selector('input[id="email"]')
const password = Selector('input[id="password"]')
const loginSubmit = Selector('.button.primay.block')
const loginFormClose = Selector('.closeModal')
const loginFormHeader = Selector('.login-header-title')
const needHelpLink = Selector('input[id="cantAccessEmailLinkFromLogin"]')
const forgottenPasswordLink = Selector('input[id="forgotPasswordLinkFromLogin"]')
const loginFormSignUp = Selector('.login-signup-block')

//After login components
const rightMenuLoggedIn = Selector('.rightMenuLoggedIn')
const tickets = Selector('.tickets')
const accountBalanceIcon = Selector('input[id="nav-menu-account-link"]')
const accountDetails = Selector('.accountDetails')
const accountWelcome = Selector('.accountWelcome')
const accountEmail = Selector('.accountEmail')
const accountBalance = Selector('.accountBalance')
const topUpButton = Selector('.topUpButton')
const settings = Selector('.navMenuItemSettings')
const myTickets = Selector('[href="/my-tickets"]')
const messages = Selector('.navMenuItem').withText('Messages')
const favourites = Selector ('[href="/my-tickets/favourites"]')
const logout = Selector('.navMenuItem').withText('Log out')

//Card registration
const registerNewCard = Selector('#topUpDebitOrCreditCard')
const existingCard = Selector('.icon-card')
const replaceCard = Selector('#replaceCard')
const topUpModal = Selector('.top-up.top-up-non-purchase')
const topUpCurrentBalance = Selector('#your-current-balance-amount')
const topUpDepositAmount = Selector('#topup-deposit-amount-input')
const cardDetailsSection = Selector('#topup-title')
const cardSecurityCode = Selector('#topup-cvc-input')
const topUpPassword = Selector('#topup-mylotto-password-input')
const topUpSubmitButton = Selector('#topup-submit-button')
const topUpPrivacyPolicy = Selector('#myLotto-privacy-policy-link')
const topUpCardPolicy = Selector('#myLotto-card-policy-link')
const topUpHeaderTitle = Selector('.top-up-header-title')
const topUpHeaderStrapline = Selector('.top-up-header-strapline')
const topUpCreditedAmount = Selector('#you-just-deposited-amount')
const topUpNewBalance = Selector('#your-balance-now-amount')
const topUpDoneButton = Selector('#done-cta-button')
const topUpCloseModal = Selector('#close-modal')
const paymentExpressLogo = Selector('#topup-paymentexpress-image')
const visaCardLogo = Selector('#topup-visa-image')
const masterCardLogo = Selector('#topup-mastercard-image')

//iframe
const cardNumber = Selector('input[name="CardNumber"]')
const cardName = Selector('input[name="CardHolderName"]')
const cardExpiryMonth = Selector('#DateExpiry_1')
const cardExpiryYear = Selector('#DateExpiry_2')
const cardCvcCode = Selector('input[name="Cvc2"]')
const cardSaveButton = Selector('.DpsButton1.DpsPxPayOK')
const topUpButtonFromSavedCard = Selector('#topup-cta-button')
const topupChildModal = Selector('.form-top-up')
const topUpIframe = Selector('.pxPayIframe')

fixture `***** User setup *****`
  .page (config.domTestRootUrl)

test('Register new user', async t => {
const bank1 = await H.bank1()
const bank2 = await H.bank2()
const bank3 = await H.bank3()
const bank4 = await H.bank4()

  H.StepDescription('should go to Registration form')
  const newUserEmail = await H.makeEmail()
  await t
    .click(login)
    .click(registerNowButton)
  H.StepDescription('should fill the registration form')
  await t
    .expect(registrationPageTitle.exists).ok()
    .expect(registrationPageTitle.innerText).eql('Register Now')
    .expect(registrationForm.exists).ok()
    .expect(emailForRegistration.exists).ok()
    .typeText(emailForRegistration, newUserEmail)
    .expect(firstName.exists).ok()
    .typeText(firstName, 'regression')
    .expect(lastName.exists).ok()
    .typeText(lastName, 'user')
    .expect(newPassword.exists).ok()
    .typeText(newPassword, 'password1')
    .expect(dobDD.exists).ok()
    .typeText(dobDD, '10')
    .expect(dobMonth.exists).ok()
    .click(dobMonth)
    .pressKey('down enter')
    .expect(dobYYYY.exists).ok()
    .typeText(dobYYYY, '1990')
    .expect(femaleGender.exists).ok()
    .expect(maleGender.exists).ok()
    .click(femaleGender)
    .expect(mobileAreaCode.exists).ok()
    .typeText(mobileAreaCode, '021')
    .expect(mobileNumber.exists).ok()
    .typeText(mobileNumber, await H.makePhoneNumber())
    .click(region)
    .click(region.child(1))
    .click(location)
    .click(location.child(2))
    .click(securityQuestion)
    .click(securityQuestion.child(2))
    .typeText(securityAnswer, 'puppy')
    .click(emailPreferencesJackpots)
    .click(emailPreferencesInstantKiwi)
    .click(emailPreferencesResults)
    .expect(myLottoTerms.exists).ok()
    .expect(loginFromRegistration.exists).ok()
    .expect(registrationSubmitButton.exists).ok()
    .expect(registrationSubmitButton.innerText).eql('REGISTER NOW')
    .click(registrationSubmitButton)
  H.StepDescription('should display the registration success message')
  await t
    .expect(registrationPageTitle.exists).ok()
    .expect(registrationPageTitle.innerText).eql('Nearly there!')
    .expect(registrationSuccessPage.innerText).contains(newUserEmail)
    .expect(registrationSuccessPage.innerText).contains('I can\'t find the email - send it again')
  H.StepDescription('should get the activation code from db')
  const activationCodeFromDb = await H.getActivationCode()
  const activationUrl = "activation?activationid="
  await t
    .navigateTo(config.domTestRootUrl + activationUrl + activationCodeFromDb)
  H.StepDescription('should activate the user')
  await t
    .expect(emailVerificationSuccessModal.innerText).contains('Log in\n\nYour email address has now been verified.\n\nPlease login to complete the process.')
    .expect(email.value).eql(newUserEmail)
    .typeText(password, 'password1')
    .click(loginSubmit)
    .expect(registrationPageTitle.innerText).eql('Complete your account')
    .typeText(bankAccountBank, '20')
    .typeText(bankAccountBankBranch, '4176')
    .typeText(bankAccountAccount, '3346618')
    .typeText(bankAccountSuffix, '000')
    .expect(spendingLimitsAtRegistration.exists).ok()
    .expect(completeRegistrationButton.exists).ok()
    .expect(skipRegistration.exists).ok()
    .click(completeRegistrationButton)
    .expect(completeRegistrationButton.exists).notOk()
  H.StepDescription('Checks the after-login options')
  await t
    .expect(rightMenuLoggedIn.exists).ok()
    .expect(tickets.exists).ok()
    .click(rightMenuLoggedIn.child(1))
    .expect(accountDetails.exists).ok()
    .expect(accountWelcome.exists).ok()
    .expect(accountEmail.exists).ok()
    .expect(accountBalance.exists).ok()
    .expect(topUpButton.exists).ok()
    .expect(settings.exists).ok()
    .expect(myTickets.exists).ok()
    .expect(messages.exists).ok()
    .expect(favourites.exists).ok()
    .expect(logout.exists).ok()
  H.StepDescription('Change the bankAccount number')
  await t
    .click(settings)
    .click(changeBankAccountLink.parent())
    .typeText(bankAccountBank, '17')
    .typeText(bankAccountBankBranch, '3310')
    .typeText(bankAccountAccount, '4763796')
    .typeText(bankAccountSuffix, bank4)
    .click(bankAccountPassword)
    .pressKey('ctrl+a delete')
    .typeText(bankAccountPassword, 'password1', {speed: 0.1})
    .click(bankAccountSaveButton)
    .expect(closeBankAccountModal.exists).notOk()
  H.StepDescription('User logs out')
  await t
    .click(rightMenuLoggedIn.child(1))
    .click(logout)
    .expect(tickets.exists).notOk()
})

test('Register new user with new credit card', async t => {
const bank4 = await H.bank4()
  H.StepDescription('should go to Registration form')
  const newUserEmail = await H.makeEmail()
  await t
    .click(login)
    .click(registerNowButton)
  H.StepDescription('should fill the registration form')
  await t
    .expect(registrationPageTitle.exists).ok()
    .expect(registrationPageTitle.innerText).eql('Register Now')
    .expect(registrationForm.exists).ok()
    .expect(emailForRegistration.exists).ok()
    .typeText(emailForRegistration, newUserEmail)
    .expect(firstName.exists).ok()
    .typeText(firstName, 'regression')
    .expect(lastName.exists).ok()
    .typeText(lastName, 'user')
    .expect(newPassword.exists).ok()
    .typeText(newPassword, 'password1')
    .expect(dobDD.exists).ok()
    .typeText(dobDD, '10')
    .expect(dobMonth.exists).ok()
    .click(dobMonth)
    .pressKey('down enter')
    .expect(dobYYYY.exists).ok()
    .typeText(dobYYYY, '1990')
    .expect(femaleGender.exists).ok()
    .expect(maleGender.exists).ok()
    .click(femaleGender)
    .expect(mobileAreaCode.exists).ok()
    .typeText(mobileAreaCode, '021')
    .expect(mobileNumber.exists).ok()
    .typeText(mobileNumber, await H.makePhoneNumber())
    .click(region)
    .click(region.child(1))
    .click(location)
    .click(location.child(2))
    .click(securityQuestion)
    .click(securityQuestion.child(2))
    .typeText(securityAnswer, 'puppy')
    .click(emailPreferencesJackpots)
    .click(emailPreferencesInstantKiwi)
    .click(emailPreferencesResults)
    .expect(myLottoTerms.exists).ok()
    .expect(loginFromRegistration.exists).ok()
    .expect(registrationSubmitButton.exists).ok()
    .expect(registrationSubmitButton.innerText).eql('REGISTER NOW')
    .click(registrationSubmitButton)
  H.StepDescription('should display the registration success message')
  await t
    .expect(registrationPageTitle.exists).ok()
    .expect(registrationPageTitle.innerText).eql('Nearly there!')
    .expect(registrationSuccessPage.innerText).contains(newUserEmail)
    .expect(registrationSuccessPage.innerText).contains('I can\'t find the email - send it again')
  H.StepDescription('should get the activation code from db')
  const activationCodeFromDb = await H.getActivationCode()
  const activationUrl = "activation?activationid="
  await t
    .navigateTo(config.domTestRootUrl + activationUrl + activationCodeFromDb)
  H.StepDescription('should activate the user')
  await t
    .expect(emailVerificationSuccessModal.innerText).contains('Log in\n\nYour email address has now been verified.\n\nPlease login to complete the process.')
    .expect(email.value).eql(newUserEmail)
    .typeText(password, 'password1')
    .click(loginSubmit)
    .expect(registrationPageTitle.innerText).eql('Complete your account')
    .typeText(bankAccountBank, '24')
    .typeText(bankAccountBankBranch, '4318')
    .typeText(bankAccountAccount, '8229315')
    .typeText(bankAccountSuffix, '000')
    .expect(spendingLimitsAtRegistration.exists).ok()
    .expect(completeRegistrationButton.exists).ok()
    .expect(skipRegistration.exists).ok()
    .click(completeRegistrationButton)
    .expect(completeRegistrationButton.exists).notOk()
  H.StepDescription('Checks the after-login options')
  await t
    .expect(rightMenuLoggedIn.exists).ok()
    .expect(tickets.exists).ok()
    .click(rightMenuLoggedIn.child(1))
    .expect(accountDetails.exists).ok()
    .expect(accountWelcome.exists).ok()
    .expect(accountEmail.exists).ok()
    .expect(accountBalance.exists).ok()
    .expect(topUpButton.exists).ok()
    .expect(settings.exists).ok()
    .expect(myTickets.exists).ok()
    .expect(messages.exists).ok()
    .expect(favourites.exists).ok()
    .expect(logout.exists).ok()
  H.StepDescription('should change the bankAccount number')
  await t
    .click(settings)
    .click(changeBankAccountLink.parent())
    .typeText(bankAccountBank, '17')
    .typeText(bankAccountBankBranch, '3310')
    .typeText(bankAccountAccount, '4763796')
    .typeText(bankAccountSuffix, bank4)
    .click(bankAccountPassword)
    .pressKey('ctrl+a delete')
    .typeText(bankAccountPassword, 'password1', {speed: 0.1})
    .click(bankAccountSaveButton)
    .expect(closeBankAccountModal.exists).notOk()
  H.StepDescription('should register the new credit card')

  await t
    .expect(registerNewCard.exists).ok()
    .expect(registerNewCard.innerText).eql('Add debit or credit card\n')
    .click(registerNewCard.parent())
    .expect(topUpHeaderTitle.innerText).eql('Register new card')
    .expect(topUpHeaderStrapline.innerText).eql('Step 1: Enter your MyLotto password')
    .expect(topUpPassword.exists).ok()
    .expect(topUpSubmitButton.exists).ok()
    .expect(topUpSubmitButton.innerText).eql('NEXT')
    .expect(paymentExpressLogo.exists).ok()
    .expect(topUpCloseModal.exists).ok()
    .expect(topUpPrivacyPolicy.exists).notOk()
    .expect(topUpCardPolicy.exists).notOk()
    .click(topUpPassword)
    .typeText(topUpPassword, 'password1')
    .click(topUpSubmitButton)
  H.StepDescription('should fill the card details in Step-2 ')
  await t
    .expect(topUpHeaderTitle.innerText).eql('Register new card')
    .expect(topUpHeaderStrapline.innerText).eql('Step 2: Enter your card details  ')
    .expect(visaCardLogo.exists).ok()
    .expect(masterCardLogo.exists).ok()
    .expect(topupChildModal.exists).ok()
    .switchToIframe(topUpIframe)
  await t
    .wait(1000)
    .click(cardNumber)
    .typeText(cardNumber, '4111111111111111')
    .expect(cardName.exists).ok()
    .typeText(cardName, 'Vijay Test')
    .expect(cardExpiryMonth.exists).ok()
    .click(cardExpiryMonth)
    .pressKey('down enter')
    .click(cardExpiryYear)
    .pressKey('down enter')
    .click(cardCvcCode)
    .typeText(cardCvcCode, '123')
    .click(cardSaveButton)
    .switchToMainWindow()
  H.StepDescription('should display Card saved! modal')
  const newCardSummary = Selector('#top-up-with-a-credit-card-summary')
  await t
    .expect(topUpHeaderTitle.innerText).eql('Card saved!')
    .expect(topUpHeaderStrapline.innerText).eql('You just added a new card')
    .expect(newCardSummary.exists).ok()
    .expect(newCardSummary.innerText).contains('Your new card is: \'')
    .expect(topUpButtonFromSavedCard.exists).ok()
    .expect(topUpDoneButton.exists).ok()
    .expect(paymentExpressLogo.exists).ok()
    .expect(topUpCloseModal.exists).ok()
  H.StepDescription('should topup using the new card')
  await t
    .click(topUpButtonFromSavedCard)
    .click(topUpDepositAmount)
    .typeText(topUpDepositAmount, '2')
    .click(cardSecurityCode)
    .typeText(cardSecurityCode, '123')
    .click(topUpPassword)
    .typeText(topUpPassword, 'password1')
    .click(topUpSubmitButton)
  H.StepDescription('should display top up success modal')
  await t
    .expect(topUpHeaderTitle.innerText).eql('Top up successful')
    .expect(topUpCreditedAmount.innerText).contains('$2.00')
    .expect(topUpNewBalance.exists).ok()
    .expect(topUpDoneButton.exists).ok()
    .click(topUpDoneButton)
    .expect(topUpCloseModal.exists).notOk()
  H.StepDescription('User logs out')
  await t
    .click(rightMenuLoggedIn.child(1))
    .click(logout)
    .expect(tickets.exists).notOk()
})

